1、node 中使用 import 需要babel插件
require('babel-register')({ignore: 'node_modules'})  // 绑定node的require,转义require引进的js
module.exports = require('./app/www/server.js') // 入口文件

2、koa server热更新（nodemon）
"start": "nodemon app.js"  // 通过nodemon 守护进程，当文件修改自动重启服务

3、中间件：一层层拦截,进入（next），一层层回调
app.use(router.routes())
app.use(loggerMiddleware())
app.use(( ctx, next ) => {
    console.log('last=============')
    ctx.body = 'hello koa2 loader'
})


4、编写中间件
// ./middleware/logger.js
module.exports = function () {
    return function ( ctx, next ) {
        console.log('/logger=============')
        ctx.body = 'logger'
        next()
    }
}

// app.js
const loggerMiddleware = require('./middleware/logger.js')
app.use(loggerMiddleware())


5、路由 koa-router
// routes/index.js
const Router = require('koa-router');
const router = new Router();

router.get('/home', (ctx, next) => {
  console.log('/home=============')
  ctx.body = '/home'
  next()
  ctx.body = '/home'
})
module.exports = router

// app.js
const router = require('./routes/index')


5、子路由
// 子路由2
const router = new Router();
const page = new Router()
page.get('/404', async ( ctx )=>{
  ctx.body = '404 page!'
}).get('/helloworld', async ( ctx )=>{
  ctx.body = 'helloworld page!'
})

router.use('/page', page.routes(), page.allowedMethods())  // /page/404、 /page/helloworld


6、allowedMethods
allowedMethods处理的业务是当所有路由中间件执行完成之后,若ctx.status为空或者404的时候,丰富response对象的header头.
可以放在全局
app.use(router.routes())
app.use(router.allowedMethods());


7、koa GET请求 获取参数(koa 已封装获取参数api)
 const params = request.query

8、koa POST请求 koa-bodyparser中间件解析请求体，同时也能解析GET请求参数
 let query= ctx.request.query
 let postData = ctx.request.body

9、静态文件处理
const static = require('koa-static')
const app = new Koa()
// 静态资源目录对于相对入口文件index.js的路径
const staticPath = './static'
app.use(static(
  path.join( __dirname,  staticPath)
))


10、cookie koa自带操作cookie API

  if ( ctx.url === '/index' ) {
    ctx.cookies.set(
      'cid', 
      'hello world',
      {
        domain: 'localhost',  // 写cookie所在的域名
        path: '/index',       // 写cookie所在的路径
        maxAge: 10 * 60 * 1000, // cookie有效时长
        expires: new Date('2017-02-15'),  // cookie失效时间
        httpOnly: false,  // 是否只用于http请求中获取
        overwrite: false  // 是否允许重写
      }
    )
    ctx.body = 'cookie is ok'
  } else {
    ctx.body = 'hello world' 
  }

11、session 操作借助koa-session-minimal



// 存放sessionId的cookie配置 （session是放服务器内存当中的，所以需要通过cookie来建立连接）
let cookie = {
  maxAge: '', // cookie有效时长
  expires: '',  // cookie失效时间
  path: '', // 写cookie所在的路径
  domain: '', // 写cookie所在的域名
  httpOnly: '', // 是否只用于http请求中获取
  overwrite: '',  // 是否允许重写
  secure: '',
  sameSite: '',
  signed: '',
}
// 使用session中间件
app.use(session({
  key: 'SESSION_ID',
  store: store,// 存入固化存储介质，默认则存入内存当中，服务停止，内存清除
  cookie: cookie  // 默认会把sessionId 存放到cookie当中，并且是session cookie, 通过cookie选项重新设置
}))


session 小知识：
session 是服务器内存中存储数据用的，客户端与服务端建立连接就会生产一个session，连接断开连接就断开，一些信息需要在断开后连接还能访问到，就需要cookie来协助（设置过期时间，利用sessionId 重新找回)
session 有count属性，初始为null


12、文件上传使用busboy 读取解析文件
文件上传是异步操作，promise 封装上传操作方法，使用await 控制异步操作


13、koa-jsonp 支持跨域获取数据（jsonp跨域的关键在于返回内容,type="text/javascript"）


14、测试框架
安装测试相关框架
npm install --save-dev mocha chai supertest
mocha 模块是测试框架
chai 模块是用来进行测试结果断言库，比如一个判断 1 + 1 是否等于 2
supertest 模块是http请求测试库，用来请求API接口

使用mocha 命令 ，会默认执行当前目录下的test文件夹内测试文件


15、debugger

node --inspect index.js  // debugger当前文件 ，开启debugger模式，浏览器控制窗口就要node调试图标，点击就可以访问到index.js文件，并且在文件当中修改，设置断点，调试


16、Node 9下import/export使用简单须知

不加loader时候，使用import/export的文件后缀名必须为*.mjs（下面会讲利用Loader Hooks兼容*.js后缀文件）

16、自定义loader规则（custom-loader.mjs）
启动的flag要加载loader规则文件
例如：node --experimental-modules --loader ./custom-loader.mjs ./index.js

17、直接使用import from 命令
node --experimental-modules  --loader ./custom-loader.mjs ./index.js



18、接入mongodb
const mongoose = require('mongoose')

mongoose.connect('mongodb://admin:123456@localhost:27017/user?authSource=admin') // 连接

const Cat = mongoose.model('animal', { name: String }) // 生成db-model对象，表名会自动加上s 变成animals

// 插入数据
  if ( ctx.url === '/insertDB' ) {
    const tydi = new Cat({ name: '季斯拉夫' })
    const res = await tydi.save()
    ctx.body = res
    console.log(res)
  }


